/* automatically generated by rust-bindgen */

pub type c4s_errorhandlerfn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, arg1: *const ::std::os::raw::c_char),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct c4s_errorhandlers {
    pub errors: c4s_errorhandlerfn,
    pub warnings: c4s_errorhandlerfn,
    pub ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_c4s_errorhandlers() {
    assert_eq!(
        ::std::mem::size_of::<c4s_errorhandlers>(),
        24usize,
        concat!("Size of: ", stringify!(c4s_errorhandlers))
    );
    assert_eq!(
        ::std::mem::align_of::<c4s_errorhandlers>(),
        8usize,
        concat!("Alignment of ", stringify!(c4s_errorhandlers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c4s_errorhandlers>())).errors as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(c4s_errorhandlers),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c4s_errorhandlers>())).warnings as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(c4s_errorhandlers),
            "::",
            stringify!(warnings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c4s_errorhandlers>())).ctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(c4s_errorhandlers),
            "::",
            stringify!(ctx)
        )
    );
}
extern "C" {
    pub fn c4s_runfile(
        filename: *const ::std::os::raw::c_char,
        handlers: *mut c4s_errorhandlers,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c4s_runstring(
        script: *const ::std::os::raw::c_char,
        handlers: *mut c4s_errorhandlers,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c4s_checkfile(
        filename: *const ::std::os::raw::c_char,
        handlers: *mut c4s_errorhandlers,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c4s_checkstring(
        script: *const ::std::os::raw::c_char,
        handlers: *mut c4s_errorhandlers,
    ) -> ::std::os::raw::c_int;
}
